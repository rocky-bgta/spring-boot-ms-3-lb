#version: '3.8'
#  docker-compose up --build
#  docker-compose up
services:

  registry-service:
#    build:
#      context: ../registry-service/.
    image: salehinrocky/registry-service:v1
    container_name: registry-service
    ports:
      - "8761:8761"
    healthcheck:
      test: "curl --fail --silent http://localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
#      - SPRING_APPLICATION_NAME=REGISTRY-SERVICE
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - SERVER_PORT=8761
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=*
      - MANAGEMENT_HEALTH_PROBES_ENABLED=true
      - MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true
      - MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true
    networks:
      - eureka-network

  gateway-service:
#    build:
#      context: ../gateway-service/.
    image: salehinrocky/gateway-service:v1
    container_name: gateway-service
    ports:
      - "8700:8700"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://registry-service:8761/eureka/
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
    depends_on:
      registry-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      slack-bot-service:
        condition: service_healthy
      slack-subscription-service:
        condition: service_healthy
#      store-service:
#        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eureka-network

  auth-service:
#    build:
#      context: ../auth-service/.
    image: salehinrocky/auth-service:v1
    container_name: auth-service
    ports:
      - "8000:8000"
    healthcheck:
      test: "curl --fail --silent http://localhost:8000/auth/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      - SPRING_PROFILES_ACTIVE=rocky
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/linereflection
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=root
      - DEFAULT_SCHEMA=auth_service  # Schema for auth-service
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create
      - SPRING_KAFKA_HOST=kafka
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://registry-service:8761/eureka/
      - MANAGEMENT_HEALTH_PROBES_ENABLED=true
      - MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true
      - MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true
    depends_on:
      kafka:
        condition: service_healthy   # Wait for Kafka to be healthy before starting
      postgres-db:
        condition: service_healthy  # Wait for PostgreSQL to be healthy
      registry-service:
        condition: service_healthy  # Wait for Registry to be healthy
    networks:
      - eureka-network

  slack-bot-service:  # Example for another service that needs its own schema
#    build:
#      context: ../slack-bot-service/.
    image: salehinrocky/slack-bot-service:v1
    container_name: slack-bot-service
    ports:
      - "3050:3050"
    healthcheck:
      test: "curl --fail --silent http://localhost:3050/slack-bot/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1GB     # Limit memory usage to 1GB
          cpus: '1.0'      # Limit to 1 CPU core
        reservations:
          memory: 512m     # Reserve 512MB memory
          cpus: '0.5'      # Reserve 0.5 CPU core
    environment:
      - SPRING_PROFILES_ACTIVE=rocky
      - SLACK_APP_TOKEN=xapp-1-A07AXBNDSTZ-7371674589287-03c299a17e1f373e51b80c51b64f2921ffc025e63df42c2b3defe7614ad10d62  # Define environment variable here
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/linereflection
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=root
      - DEFAULT_SCHEMA=slack_bot_service  # Schema for another-service
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create
#      - SLACK_NGROK_END_POINT = https://loopstarapi.techsupporta.com
      - FRONT_END_POINT = https://loopstar.netlify.app
      #      - SLACK_NGROK_END_POINT=https://c39d-103-152-237-87.ngrok-free.app
      - SPRING_KAFKA_HOST=kafka
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://registry-service:8761/eureka/
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=*
      - MANAGEMENT_HEALTH_PROBES_ENABLED=true
      - MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true
      - MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true
    depends_on:
      kafka:
        condition: service_healthy   # Wait for Kafka to be healthy before starting
      postgres-db:
        condition: service_healthy  # Wait for PostgreSQL to be healthy
      registry-service:
        condition: service_healthy
    networks:
      - eureka-network



  slack-subscription-service: # Example for another service that needs its own schema
#    build:
#      context: ../slack-subscription-service/.
    image: salehinrocky/slack-subscription-service:v1
    container_name: slack-subscription
    ports:
      - "4000:4000"
    healthcheck:
      test: "curl --fail --silent http://localhost:4000/subscription/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m     # Limit memory usage to 700MB
          cpus: '1.0'      # Limit to 1 CPU core
        reservations:
          memory: 512m     # Reserve 512MB memory
          cpus: '0.5'      # Reserve 0.5 CPU core
    environment:
      #      - SPRING_APPLICATION_NAME = "SLACK-SUBSCRIPTION-SERVICE"
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/linereflection
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=root
      - DEFAULT_SCHEMA=slack_subscription_service  # Schema for another-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://registry-service:8761/eureka/
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=*
      - MANAGEMENT_HEALTH_PROBES_ENABLED=true
      - MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true
      - MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true
    depends_on:
      registry-service:
        condition: service_healthy
      postgres-db:
        condition: service_healthy  # Wait for PostgreSQL to be healthy
    networks:
      - eureka-network


#
#
#
#  store-service: # Example for another service that needs its own schema
##    build:
##      context: ../store-service/.
#    image: salehinrocky/store-service:v1
#    container_name: store-service
#    ports:
#      - "5000:5000"
#    healthcheck:
#      test: "curl --fail --silent http://localhost:5000/actuator/health/readiness | grep UP || exit 1"
#      interval: 10s
#      timeout: 5s
#      retries: 10
#      start_period: 10s
#    deploy:
#      resources:
#        limits:
#          memory: 700m     # Limit memory usage to 700MB
#          cpus: '1.0'      # Limit to 1 CPU core
#        reservations:
#          memory: 512m     # Reserve 512MB memory
#          cpus: '0.5'      # Reserve 0.5 CPU core
#    environment:
#      #      - SPRING_APPLICATION_NAME = "STORE-SERVICE"
#      - SPRING_PROFILES_ACTIVE=rocky
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/linereflection
#      - SPRING_DATASOURCE_USERNAME=postgres
#      - SPRING_DATASOURCE_PASSWORD=root
#      - DEFAULT_SCHEMA=store_service  # Schema for another-service
#      - EUREKA_DEFAULT_ZONE_URL=http://registry-service:8761/eureka/
#      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=*
#      - MANAGEMENT_HEALTH_PROBES_ENABLED=true
#      - MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true
#      - MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true
#    depends_on:
#      registry-service:
#        condition: service_healthy
#      postgres-db:
#        condition: service_healthy
#    networks:
#      - eureka-network
#




  postgres-db:
    image: postgres:13
    container_name: postgres-db
    environment:
      POSTGRES_DB: linereflection  # Shared database for all services
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]  # PostgreSQL readiness check
      interval: 10s   # Check every 10 seconds
      timeout: 5s     # Wait up to 5 seconds for a response
      retries: 5      # Retry 5 times before marking as unhealthy
      start_period: 15s  # Wait 15 seconds before starting health checks
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - eureka-network


  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    ports:
      - "9092:9092"  # Expose Kafka for external access
      - "9093:9093"  # Expose Controller port
    environment:
      # KRaft settings (no ZooKeeper)
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@localhost:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s

    networks:
      - eureka-network




#  kafka:
#    image: wurstmeister/kafka
#    container_name: kafka
#    environment:
#      KAFKA_BROKER_ID: -1  # Auto-assign a broker ID
#      KAFKA_ADVERTISED_HOST_NAME: kafka
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#    ports:
#      - "9092:9092"
#    depends_on:
#      - zookeeper
#    healthcheck:
#      test: [ "CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092" ]
#      interval: 10s
#      timeout: 5s
#      retries: 10
#      start_period: 5s
#    #    entrypoint: >
#    #      /bin/sh -c '(/opt/kafka/bin/zookeeper-shell.sh zookeeper:2181 rmr /brokers/ids/1 || true) &&
#    #      /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties'
#    networks:
#      - eureka-network
#
#  zookeeper:
#    image: wurstmeister/zookeeper
#    container_name: zookeeper
#    ports:
#      - "2181:2181"
#    networks:
#      - eureka-network

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    networks:
      - eureka-network


volumes:
  postgres-data:

networks:
  eureka-network:
    driver: bridge
